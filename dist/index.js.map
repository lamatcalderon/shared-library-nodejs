{"version":3,"file":"index.js","sources":["../src/util/util.ts","../src/customers/domain/customer.domain.ts","../src/customers/infraestructure/adapter/out/rest-axios.adapter.ts","../src/util/container-out-port.util.ts","../src/customers/application/use-case/create-customer.use-case.ts","../src/util/container-use-case.util.ts","../src/customers/infraestructure/adapter/in/service/customer.service.ts"],"sourcesContent":["export function sum(a: number, b: number): number {\n    return a + b;\n}","export class Customer {\n    customerId: number;\n    customerName: string;\n    customerLastName: string;\n}","import axios, { AxiosRequestConfig } from \"axios\";\n\nimport { RestPort } from \"../../port/out/rest.port\";\n\nconst instance = axios.create({\n    baseURL: \"http://localhost:8083\",\n});\n\ninstance.interceptors.request.use(\n    (config) => {\n        return config;\n    },\n    (err) => {\n        Promise.reject(err);\n    }\n);\n\nexport class RestAxios implements RestPort {\n\n    private static instance: RestAxios;\n\n    private constructor() { }\n\n    static getInstance(): RestAxios {\n        if (!RestAxios.instance) {\n            RestAxios.instance = new RestAxios();\n        }\n        return RestAxios.instance;\n    }\n\n    get<T>(entity: T): Promise<T[]> {\n        throw new Error(\"Method not implemented.\");\n    }\n    post<T>(path: string, entity: T): Promise<T> {\n        return instance.post(path, entity);\n    }\n    delete<T>(entity: T): Promise<any> {\n        throw new Error(\"Method not implemented.\");\n    }\n    put<T>(entity: T): Promise<any> {\n        throw new Error(\"Method not implemented.\");\n    }\n}","import { RestPort } from '../customers/infraestructure/port/out/rest.port';\nimport { RestAxios } from '../customers/infraestructure/adapter/out/rest-axios.adapter';\n\nlet restAxiosInstance: RestPort | null = null;\n\nexport function getRestAxiosPort(): RestPort {\n    if (!restAxiosInstance) {\n        restAxiosInstance = RestAxios.getInstance();\n    }\n    return restAxiosInstance;\n}","import { CreateCustomerPort } from \"../../infraestructure/port/in/create-customer.port\";\nimport { Customer } from \"../../domain/customer.domain\";\n\nimport { RestPort } from \"../../infraestructure/port/out/rest.port\";\nimport { getRestAxiosPort } from \"../../../util/container-out-port.util\";\n\nexport class CreateCustomerUseCase implements CreateCustomerPort {\n\n    private static instance: CreateCustomerUseCase;\n    private restPort: RestPort = getRestAxiosPort(); \n\n    private constructor() { }\n\n    static getInstance(): CreateCustomerUseCase {\n        if (!CreateCustomerUseCase.instance) {\n            CreateCustomerUseCase.instance = new CreateCustomerUseCase();\n        }\n        return CreateCustomerUseCase.instance;\n    }\n\n    createCustomer(customer: Customer): Promise<Customer> {        \n        return this.restPort.post(\"/customer\", customer);\n    }\n}","import { CreateCustomerUseCase } from '../customers/application/use-case/create-customer.use-case';\nimport { CreateCustomerPort } from '../customers/infraestructure/port/in/create-customer.port';\n\nlet createCustomerUseCaseInstance: CreateCustomerPort | null = null;\n\nexport function getCreateCustomerPort(): CreateCustomerPort {\n    if (!createCustomerUseCaseInstance) {\n        createCustomerUseCaseInstance = CreateCustomerUseCase.getInstance();\n    }\n    return createCustomerUseCaseInstance;\n}\n","import { Customer } from \"../../../../domain/customer.domain\";\nimport { CreateCustomerPort } from \"../../../port/in/create-customer.port\";\nimport { getCreateCustomerPort } from \"../../../../../util/container-use-case.util\";\n\nexport const createCustomer = (customer: Customer) => {\n    const createUserPort: CreateCustomerPort = getCreateCustomerPort();\n    return createUserPort.createCustomer(customer);\n}"],"names":["axios"],"mappings":"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"}